=begin
#Todoist API

## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
Generator version: 7.14.0-SNAPSHOT

=end

require 'cgi'

module Todoist
  class WorkspaceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept Invitation
    # Accept a workspace invitation. Usable by authenticated users only.
    # @param invite_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceInvitationView]
    def accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put(invite_code, opts = {})
      data, _status_code, _headers = accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put_with_http_info(invite_code, opts)
      data
    end

    # Accept Invitation
    # Accept a workspace invitation. Usable by authenticated users only.
    # @param invite_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceInvitationView, Integer, Hash)>] WorkspaceInvitationView data, response status code and response headers
    def accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put_with_http_info(invite_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put ...'
      end
      # verify the required parameter 'invite_code' is set
      if @api_client.config.client_side_validation && invite_code.nil?
        fail ArgumentError, "Missing the required parameter 'invite_code' when calling WorkspaceApi.accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/invitations/{invite_code}/accept'.sub('{' + 'invite_code' + '}', CGI.escape(invite_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceInvitationView'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#accept_invitation_api_v1_workspaces_invitations_invite_code_accept_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Active Projects
    # Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [ProjectsResponse]
    def active_projects_api_v1_workspaces_workspace_id_projects_active_get(workspace_id, opts = {})
      data, _status_code, _headers = active_projects_api_v1_workspaces_workspace_id_projects_active_get_with_http_info(workspace_id, opts)
      data
    end

    # Active Projects
    # Returns all active workspace projects, including those visible but not joined by the user.  _For guests, returns all joined workspace projects only._
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(ProjectsResponse, Integer, Hash)>] ProjectsResponse data, response status code and response headers
    def active_projects_api_v1_workspaces_workspace_id_projects_active_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.active_projects_api_v1_workspaces_workspace_id_projects_active_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.active_projects_api_v1_workspaces_workspace_id_projects_active_get"
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling WorkspaceApi.active_projects_api_v1_workspaces_workspace_id_projects_active_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling WorkspaceApi.active_projects_api_v1_workspaces_workspace_id_projects_active_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/api/v1/workspaces/{workspace_id}/projects/active'.sub('{' + 'workspace_id' + '}', CGI.escape(workspace_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.active_projects_api_v1_workspaces_workspace_id_projects_active_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#active_projects_api_v1_workspaces_workspace_id_projects_active_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All Invitations
    # Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<WorkspaceInvitationView>]
    def all_invitations_api_v1_workspaces_invitations_all_get(workspace_id, opts = {})
      data, _status_code, _headers = all_invitations_api_v1_workspaces_invitations_all_get_with_http_info(workspace_id, opts)
      data
    end

    # All Invitations
    # Return a list containing details of all pending invitation to a workspace.  This list is not paginated. All workspace members can access this list.
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WorkspaceInvitationView>, Integer, Hash)>] Array<WorkspaceInvitationView> data, response status code and response headers
    def all_invitations_api_v1_workspaces_invitations_all_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.all_invitations_api_v1_workspaces_invitations_all_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.all_invitations_api_v1_workspaces_invitations_all_get"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/invitations/all'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspace_id'] = workspace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WorkspaceInvitationView>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.all_invitations_api_v1_workspaces_invitations_all_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#all_invitations_api_v1_workspaces_invitations_all_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archived Projects
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [ProjectsResponse]
    def archived_projects_api_v1_workspaces_workspace_id_projects_archived_get(workspace_id, opts = {})
      data, _status_code, _headers = archived_projects_api_v1_workspaces_workspace_id_projects_archived_get_with_http_info(workspace_id, opts)
      data
    end

    # Archived Projects
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(ProjectsResponse, Integer, Hash)>] ProjectsResponse data, response status code and response headers
    def archived_projects_api_v1_workspaces_workspace_id_projects_archived_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.archived_projects_api_v1_workspaces_workspace_id_projects_archived_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.archived_projects_api_v1_workspaces_workspace_id_projects_archived_get"
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling WorkspaceApi.archived_projects_api_v1_workspaces_workspace_id_projects_archived_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling WorkspaceApi.archived_projects_api_v1_workspaces_workspace_id_projects_archived_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/api/v1/workspaces/{workspace_id}/projects/archived'.sub('{' + 'workspace_id' + '}', CGI.escape(workspace_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.archived_projects_api_v1_workspaces_workspace_id_projects_archived_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#archived_projects_api_v1_workspaces_workspace_id_projects_archived_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Invitation
    # Deletes a workspace invitation. Only admins can delete invitations.
    # @param todoist_apps_api_sync_rest_workspaces_body1 [TodoistAppsApiSyncRestWorkspacesBody1] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceInvitationView]
    def delete_invitation_api_v1_workspaces_invitations_delete_post(todoist_apps_api_sync_rest_workspaces_body1, opts = {})
      data, _status_code, _headers = delete_invitation_api_v1_workspaces_invitations_delete_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body1, opts)
      data
    end

    # Delete Invitation
    # Deletes a workspace invitation. Only admins can delete invitations.
    # @param todoist_apps_api_sync_rest_workspaces_body1 [TodoistAppsApiSyncRestWorkspacesBody1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceInvitationView, Integer, Hash)>] WorkspaceInvitationView data, response status code and response headers
    def delete_invitation_api_v1_workspaces_invitations_delete_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.delete_invitation_api_v1_workspaces_invitations_delete_post ...'
      end
      # verify the required parameter 'todoist_apps_api_sync_rest_workspaces_body1' is set
      if @api_client.config.client_side_validation && todoist_apps_api_sync_rest_workspaces_body1.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_sync_rest_workspaces_body1' when calling WorkspaceApi.delete_invitation_api_v1_workspaces_invitations_delete_post"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/invitations/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_sync_rest_workspaces_body1)

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceInvitationView'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.delete_invitation_api_v1_workspaces_invitations_delete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#delete_invitation_api_v1_workspaces_invitations_delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Workspaces Users
    # Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id 
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [UsersResponse]
    def get_workspaces_users_api_v1_workspaces_users_get(opts = {})
      data, _status_code, _headers = get_workspaces_users_api_v1_workspaces_users_get_with_http_info(opts)
      data
    end

    # Get Workspaces Users
    # Returns all workspace_users for a given workspace if workspace_id is provided. Otherwise, returns all workspace_users for all workspaces that the requesting user is part of.  _Not accessible by guests._
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id 
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 100)
    # @return [Array<(UsersResponse, Integer, Hash)>] UsersResponse data, response status code and response headers
    def get_workspaces_users_api_v1_workspaces_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.get_workspaces_users_api_v1_workspaces_users_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling WorkspaceApi.get_workspaces_users_api_v1_workspaces_users_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling WorkspaceApi.get_workspaces_users_api_v1_workspaces_users_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/api/v1/workspaces/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspace_id'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.get_workspaces_users_api_v1_workspaces_users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#get_workspaces_users_api_v1_workspaces_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invitations
    # Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def invitations_api_v1_workspaces_invitations_get(workspace_id, opts = {})
      data, _status_code, _headers = invitations_api_v1_workspaces_invitations_get_with_http_info(workspace_id, opts)
      data
    end

    # Invitations
    # Return a list of user emails who have a pending invitation to a workspace.  The list is not paginated. All workspace members can access this list.
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def invitations_api_v1_workspaces_invitations_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.invitations_api_v1_workspaces_invitations_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.invitations_api_v1_workspaces_invitations_get"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/invitations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspace_id'] = workspace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.invitations_api_v1_workspaces_invitations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#invitations_api_v1_workspaces_invitations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join
    # Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
    # @param todoist_apps_api_sync_rest_workspaces_body2 [TodoistAppsApiSyncRestWorkspacesBody2] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceUserView]
    def join_api_v1_workspaces_join_post(todoist_apps_api_sync_rest_workspaces_body2, opts = {})
      data, _status_code, _headers = join_api_v1_workspaces_join_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body2, opts)
      data
    end

    # Join
    # Join a workspace via link or via workspace ID, if the user can auto-join the workspace by domain.  ## Joining by Domain This is possible if: - The user is verified - The user has a user e-mail belonging to a domain that is set   as a domain name for a workspace - That workspace has the auto-join by domain feature enabled
    # @param todoist_apps_api_sync_rest_workspaces_body2 [TodoistAppsApiSyncRestWorkspacesBody2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceUserView, Integer, Hash)>] WorkspaceUserView data, response status code and response headers
    def join_api_v1_workspaces_join_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.join_api_v1_workspaces_join_post ...'
      end
      # verify the required parameter 'todoist_apps_api_sync_rest_workspaces_body2' is set
      if @api_client.config.client_side_validation && todoist_apps_api_sync_rest_workspaces_body2.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_sync_rest_workspaces_body2' when calling WorkspaceApi.join_api_v1_workspaces_join_post"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/join'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_sync_rest_workspaces_body2)

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceUserView'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.join_api_v1_workspaces_join_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#join_api_v1_workspaces_join_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Plan Details
    # Lists details of the workspace's current plan and usage
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [PlanDetailsResponse]
    def plan_details_api_v1_workspaces_plan_details_get(workspace_id, opts = {})
      data, _status_code, _headers = plan_details_api_v1_workspaces_plan_details_get_with_http_info(workspace_id, opts)
      data
    end

    # Plan Details
    # Lists details of the workspace&#39;s current plan and usage
    # @param workspace_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanDetailsResponse, Integer, Hash)>] PlanDetailsResponse data, response status code and response headers
    def plan_details_api_v1_workspaces_plan_details_get_with_http_info(workspace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.plan_details_api_v1_workspaces_plan_details_get ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling WorkspaceApi.plan_details_api_v1_workspaces_plan_details_get"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/plan_details'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspace_id'] = workspace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.plan_details_api_v1_workspaces_plan_details_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#plan_details_api_v1_workspaces_plan_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject Invitation
    # Reject a workspace invitation. Usable by authenticated users only.
    # @param invite_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [WorkspaceInvitationView]
    def reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put(invite_code, opts = {})
      data, _status_code, _headers = reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put_with_http_info(invite_code, opts)
      data
    end

    # Reject Invitation
    # Reject a workspace invitation. Usable by authenticated users only.
    # @param invite_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkspaceInvitationView, Integer, Hash)>] WorkspaceInvitationView data, response status code and response headers
    def reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put_with_http_info(invite_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put ...'
      end
      # verify the required parameter 'invite_code' is set
      if @api_client.config.client_side_validation && invite_code.nil?
        fail ArgumentError, "Missing the required parameter 'invite_code' when calling WorkspaceApi.reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/invitations/{invite_code}/reject'.sub('{' + 'invite_code' + '}', CGI.escape(invite_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WorkspaceInvitationView'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#reject_invitation_api_v1_workspaces_invitations_invite_code_reject_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Logo
    # Upload an image to be used as the workspace logo. Similar to a user’s avatar. If `delete` is set to true, it removes the logo completely and does not return any `logo_*` attribute.
    # @param todoist_apps_api_sync_rest_workspaces_body3 [TodoistAppsApiSyncRestWorkspacesBody3] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_logo_api_v1_workspaces_logo_post(todoist_apps_api_sync_rest_workspaces_body3, opts = {})
      data, _status_code, _headers = update_logo_api_v1_workspaces_logo_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body3, opts)
      data
    end

    # Update Logo
    # Upload an image to be used as the workspace logo. Similar to a user’s avatar. If &#x60;delete&#x60; is set to true, it removes the logo completely and does not return any &#x60;logo_*&#x60; attribute.
    # @param todoist_apps_api_sync_rest_workspaces_body3 [TodoistAppsApiSyncRestWorkspacesBody3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_logo_api_v1_workspaces_logo_post_with_http_info(todoist_apps_api_sync_rest_workspaces_body3, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkspaceApi.update_logo_api_v1_workspaces_logo_post ...'
      end
      # verify the required parameter 'todoist_apps_api_sync_rest_workspaces_body3' is set
      if @api_client.config.client_side_validation && todoist_apps_api_sync_rest_workspaces_body3.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_sync_rest_workspaces_body3' when calling WorkspaceApi.update_logo_api_v1_workspaces_logo_post"
      end
      # resource path
      local_var_path = '/api/v1/workspaces/logo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_sync_rest_workspaces_body3)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WorkspaceApi.update_logo_api_v1_workspaces_logo_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkspaceApi#update_logo_api_v1_workspaces_logo_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
