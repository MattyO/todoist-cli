=begin
#Todoist API

## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
Generator version: 7.14.0-SNAPSHOT

=end

require 'cgi'

module Todoist
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive Project
    # Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost]
    def archive_project_api_v1_projects_project_id_archive_post(project_id, opts = {})
      data, _status_code, _headers = archive_project_api_v1_projects_project_id_archive_post_with_http_info(project_id, opts)
      data
    end

    # Archive Project
    # Marks a project as archived. For personal projects, this will archive it just for the initiating user (leaving it visible to any other collaborators). For workspace projects, this will archive it for all workspace users, removing it from view.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost, Integer, Hash)>] ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost data, response status code and response headers
    def archive_project_api_v1_projects_project_id_archive_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.archive_project_api_v1_projects_project_id_archive_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.archive_project_api_v1_projects_project_id_archive_post"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}/archive'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseArchiveProjectApiV1ProjectsProjectIdArchivePost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.archive_project_api_v1_projects_project_id_archive_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#archive_project_api_v1_projects_project_id_archive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Project
    # Creates a new project and returns it
    # @param todoist_apps_api_rest_projects_body1 [TodoistAppsApiRestProjectsBody1] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseCreateProjectApiV1ProjectsPost]
    def create_project_api_v1_projects_post(todoist_apps_api_rest_projects_body1, opts = {})
      data, _status_code, _headers = create_project_api_v1_projects_post_with_http_info(todoist_apps_api_rest_projects_body1, opts)
      data
    end

    # Create Project
    # Creates a new project and returns it
    # @param todoist_apps_api_rest_projects_body1 [TodoistAppsApiRestProjectsBody1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseCreateProjectApiV1ProjectsPost, Integer, Hash)>] ResponseCreateProjectApiV1ProjectsPost data, response status code and response headers
    def create_project_api_v1_projects_post_with_http_info(todoist_apps_api_rest_projects_body1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.create_project_api_v1_projects_post ...'
      end
      # verify the required parameter 'todoist_apps_api_rest_projects_body1' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_projects_body1.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_projects_body1' when calling ProjectsApi.create_project_api_v1_projects_post"
      end
      # resource path
      local_var_path = '/api/v1/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_projects_body1)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseCreateProjectApiV1ProjectsPost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.create_project_api_v1_projects_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#create_project_api_v1_projects_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Project
    # Deletes a project and all of its sections and tasks.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_project_api_v1_projects_project_id_delete(project_id, opts = {})
      data, _status_code, _headers = delete_project_api_v1_projects_project_id_delete_with_http_info(project_id, opts)
      data
    end

    # Delete Project
    # Deletes a project and all of its sections and tasks.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_project_api_v1_projects_project_id_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.delete_project_api_v1_projects_project_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.delete_project_api_v1_projects_project_id_delete"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.delete_project_api_v1_projects_project_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#delete_project_api_v1_projects_project_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Archived
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle]
    def get_archived_api_v1_projects_archived_get(opts = {})
      data, _status_code, _headers = get_archived_api_v1_projects_archived_get_with_http_info(opts)
      data
    end

    # Get Archived
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle, Integer, Hash)>] PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle data, response status code and response headers
    def get_archived_api_v1_projects_archived_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_archived_api_v1_projects_archived_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling ProjectsApi.get_archived_api_v1_projects_archived_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling ProjectsApi.get_archived_api_v1_projects_archived_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.get_archived_api_v1_projects_archived_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = '/api/v1/projects/archived'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListAnnotatedProjectV1ViewFieldInfoAnnotationNoneTypeRequiredTrueExamplesIdNameChildOrderParentIdColorCollapsedIsArchivedIsDeletedViewStyle'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_archived_api_v1_projects_archived_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_archived_api_v1_projects_archived_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Project
    # Returns a project object related to the given ID
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseGetProjectApiV1ProjectsProjectIdGet]
    def get_project_api_v1_projects_project_id_get(project_id, opts = {})
      data, _status_code, _headers = get_project_api_v1_projects_project_id_get_with_http_info(project_id, opts)
      data
    end

    # Get Project
    # Returns a project object related to the given ID
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseGetProjectApiV1ProjectsProjectIdGet, Integer, Hash)>] ResponseGetProjectApiV1ProjectsProjectIdGet data, response status code and response headers
    def get_project_api_v1_projects_project_id_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_api_v1_projects_project_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.get_project_api_v1_projects_project_id_get"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseGetProjectApiV1ProjectsProjectIdGet'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_api_v1_projects_project_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_api_v1_projects_project_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Project Collaborators
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListCollaborator]
    def get_project_collaborators_api_v1_projects_project_id_collaborators_get(project_id, opts = {})
      data, _status_code, _headers = get_project_collaborators_api_v1_projects_project_id_collaborators_get_with_http_info(project_id, opts)
      data
    end

    # Get Project Collaborators
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListCollaborator, Integer, Hash)>] PaginatedListCollaborator data, response status code and response headers
    def get_project_collaborators_api_v1_projects_project_id_collaborators_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get"
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = '/api/v1/projects/{project_id}/collaborators'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListCollaborator'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_project_collaborators_api_v1_projects_project_id_collaborators_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_project_collaborators_api_v1_projects_project_id_collaborators_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Projects
    # Returns a list containing all active user projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject]
    def get_projects_api_v1_projects_get(opts = {})
      data, _status_code, _headers = get_projects_api_v1_projects_get_with_http_info(opts)
      data
    end

    # Get Projects
    # Returns a list containing all active user projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor 
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject, Integer, Hash)>] PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject data, response status code and response headers
    def get_projects_api_v1_projects_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.get_projects_api_v1_projects_get ...'
      end
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling ProjectsApi.get_projects_api_v1_projects_get, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/)
      if @api_client.config.client_side_validation && !opts[:'cursor'].nil? && opts[:'cursor'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling ProjectsApi.get_projects_api_v1_projects_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.get_projects_api_v1_projects_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = '/api/v1/projects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PaginatedListAnnotatedUnionPersonalProjectSyncViewWorkspaceProjectSyncViewFieldInfoAnnotationNoneTypeRequiredTrueTitleProjectObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.get_projects_api_v1_projects_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#get_projects_api_v1_projects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join
    # _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetDataV2Response]
    def join_api_v1_projects_project_id_join_post(project_id, opts = {})
      data, _status_code, _headers = join_api_v1_projects_project_id_join_post_with_http_info(project_id, opts)
      data
    end

    # Join
    # _Only used for workspaces_  This endpoint is used to join a workspace project by a workspace_user and is only usable by the workspace user.
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDataV2Response, Integer, Hash)>] GetDataV2Response data, response status code and response headers
    def join_api_v1_projects_project_id_join_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.join_api_v1_projects_project_id_join_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.join_api_v1_projects_project_id_join_post"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}/join'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDataV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.join_api_v1_projects_project_id_join_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#join_api_v1_projects_project_id_join_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unarchive Project
    # Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost]
    def unarchive_project_api_v1_projects_project_id_unarchive_post(project_id, opts = {})
      data, _status_code, _headers = unarchive_project_api_v1_projects_project_id_unarchive_post_with_http_info(project_id, opts)
      data
    end

    # Unarchive Project
    # Marks a previously archived project as active again. For personal projects, this will make the project visible again for the initiating user. For workspace projects, this will make the project visible again for all applicable workspace users.
    # @param project_id [ProjectId3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost, Integer, Hash)>] ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost data, response status code and response headers
    def unarchive_project_api_v1_projects_project_id_unarchive_post_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.unarchive_project_api_v1_projects_project_id_unarchive_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.unarchive_project_api_v1_projects_project_id_unarchive_post"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}/unarchive'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseUnarchiveProjectApiV1ProjectsProjectIdUnarchivePost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.unarchive_project_api_v1_projects_project_id_unarchive_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#unarchive_project_api_v1_projects_project_id_unarchive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Project
    # Updated a project and return it
    # @param project_id [ProjectId3] 
    # @param todoist_apps_api_rest_projects_body2 [TodoistAppsApiRestProjectsBody2] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseUpdateProjectApiV1ProjectsProjectIdPost]
    def update_project_api_v1_projects_project_id_post(project_id, todoist_apps_api_rest_projects_body2, opts = {})
      data, _status_code, _headers = update_project_api_v1_projects_project_id_post_with_http_info(project_id, todoist_apps_api_rest_projects_body2, opts)
      data
    end

    # Update Project
    # Updated a project and return it
    # @param project_id [ProjectId3] 
    # @param todoist_apps_api_rest_projects_body2 [TodoistAppsApiRestProjectsBody2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseUpdateProjectApiV1ProjectsProjectIdPost, Integer, Hash)>] ResponseUpdateProjectApiV1ProjectsProjectIdPost data, response status code and response headers
    def update_project_api_v1_projects_project_id_post_with_http_info(project_id, todoist_apps_api_rest_projects_body2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.update_project_api_v1_projects_project_id_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.update_project_api_v1_projects_project_id_post"
      end
      # verify the required parameter 'todoist_apps_api_rest_projects_body2' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_projects_body2.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_projects_body2' when calling ProjectsApi.update_project_api_v1_projects_project_id_post"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_projects_body2)

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseUpdateProjectApiV1ProjectsProjectIdPost'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectsApi.update_project_api_v1_projects_project_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#update_project_api_v1_projects_project_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
