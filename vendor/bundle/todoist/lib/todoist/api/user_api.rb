# #Todoist API
#
## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime.
#
# The version of the OpenAPI document: 1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.14.0-SNAPSHOT
#

require "cgi"

module Todoist
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Productivity Stats
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_productivity_stats_api_v1_tasks_completed_stats_get(opts = {})
      data, _status_code, _headers = get_productivity_stats_api_v1_tasks_completed_stats_get_with_http_info(opts)
      data
    end

    # Get Productivity Stats
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_productivity_stats_api_v1_tasks_completed_stats_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_productivity_stats_api_v1_tasks_completed_stats_get ..."
      end
      # resource path
      local_var_path = "/api/v1/tasks/completed/stats"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Hash<String, Object>"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"UserApi.get_productivity_stats_api_v1_tasks_completed_stats_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_productivity_stats_api_v1_tasks_completed_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Notification Setting
    # @param notification_type [NotificationType]
    # @param service [NotificationChannel]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token
    # @option opts [Boolean] :dont_notify
    # @return [Hash<String, Hash<String, Boolean>>]
    def update_notification_setting_api_v1_notification_setting_put(notification_type, service, opts = {})
      data, _status_code, _headers = update_notification_setting_api_v1_notification_setting_put_with_http_info(notification_type, service, opts)
      data
    end

    # Update Notification Setting
    # @param notification_type [NotificationType]
    # @param service [NotificationChannel]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token
    # @option opts [Boolean] :dont_notify
    # @return [Array<(Hash<String, Hash<String, Boolean>>, Integer, Hash)>] Hash<String, Hash<String, Boolean>> data, response status code and response headers
    def update_notification_setting_api_v1_notification_setting_put_with_http_info(notification_type, service, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.update_notification_setting_api_v1_notification_setting_put ..."
      end
      # verify the required parameter 'notification_type' is set
      if @api_client.config.client_side_validation && notification_type.nil?
        fail ArgumentError, "Missing the required parameter 'notification_type' when calling UserApi.update_notification_setting_api_v1_notification_setting_put"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling UserApi.update_notification_setting_api_v1_notification_setting_put"
      end
      # resource path
      local_var_path = "/api/v1/notification_setting"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:notification_type] = notification_type
      query_params[:service] = service
      query_params[:token] = opts[:token] if !opts[:token].nil?
      query_params[:dont_notify] = opts[:dont_notify] if !opts[:dont_notify].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Hash<String, Hash<String, Boolean>>"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"UserApi.update_notification_setting_api_v1_notification_setting_put",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_notification_setting_api_v1_notification_setting_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # User Info
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def user_info_api_v1_user_get(opts = {})
      data, _status_code, _headers = user_info_api_v1_user_get_with_http_info(opts)
      data
    end

    # User Info
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def user_info_api_v1_user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.user_info_api_v1_user_get ..."
      end
      # resource path
      local_var_path = "/api/v1/user"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Hash<String, Object>"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"UserApi.user_info_api_v1_user_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_info_api_v1_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
