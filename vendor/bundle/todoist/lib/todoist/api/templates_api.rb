# #Todoist API
#
## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime.
#
# The version of the OpenAPI document: 1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.14.0-SNAPSHOT
#

require "cgi"

module Todoist
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Project From File
    # A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
    # @param todoist_apps_import_export_controllers_rest_body3 [TodoistAppsImportExportControllersRestBody3]
    # @param [Hash] opts the optional parameters
    # @return [ProjectImportCreateResponseWithObjects]
    def create_project_from_file_api_v1_templates_create_project_from_file_post(todoist_apps_import_export_controllers_rest_body3, opts = {})
      data, _status_code, _headers = create_project_from_file_api_v1_templates_create_project_from_file_post_with_http_info(todoist_apps_import_export_controllers_rest_body3, opts)
      data
    end

    # Create Project From File
    # A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
    # @param todoist_apps_import_export_controllers_rest_body3 [TodoistAppsImportExportControllersRestBody3]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectImportCreateResponseWithObjects, Integer, Hash)>] ProjectImportCreateResponseWithObjects data, response status code and response headers
    def create_project_from_file_api_v1_templates_create_project_from_file_post_with_http_info(todoist_apps_import_export_controllers_rest_body3, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.create_project_from_file_api_v1_templates_create_project_from_file_post ..."
      end
      # verify the required parameter 'todoist_apps_import_export_controllers_rest_body3' is set
      if @api_client.config.client_side_validation && todoist_apps_import_export_controllers_rest_body3.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_import_export_controllers_rest_body3' when calling TemplatesApi.create_project_from_file_api_v1_templates_create_project_from_file_post"
      end
      # resource path
      local_var_path = "/api/v1/templates/create_project_from_file"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_import_export_controllers_rest_body3)

      # return_type
      return_type = opts[:debug_return_type] || "ProjectImportCreateResponseWithObjects"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TemplatesApi.create_project_from_file_api_v1_templates_create_project_from_file_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#create_project_from_file_api_v1_templates_create_project_from_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Export As File
    # Get a template for a project as a CSV file
    # @param project_id [ProjectId3]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_relative_dates  (default to true)
    # @return [String]
    def export_as_file_api_v1_templates_file_get(project_id, opts = {})
      data, _status_code, _headers = export_as_file_api_v1_templates_file_get_with_http_info(project_id, opts)
      data
    end

    # Export As File
    # Get a template for a project as a CSV file
    # @param project_id [ProjectId3]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_relative_dates  (default to true)
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_as_file_api_v1_templates_file_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.export_as_file_api_v1_templates_file_get ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TemplatesApi.export_as_file_api_v1_templates_file_get"
      end
      # resource path
      local_var_path = "/api/v1/templates/file"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:project_id] = project_id
      query_params[:use_relative_dates] = opts[:use_relative_dates] if !opts[:use_relative_dates].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["text/html"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "String"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TemplatesApi.export_as_file_api_v1_templates_file_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#export_as_file_api_v1_templates_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Export As Url
    # Get a template for a project as a shareable URL.  The URL can then be passed to `https://todoist.com/api/v1/import/project_from_url?t_url=<url>` to make a shareable template.
    # @param project_id [ProjectId3]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_relative_dates  (default to true)
    # @return [FileURLResponse]
    def export_as_url_api_v1_templates_url_get(project_id, opts = {})
      data, _status_code, _headers = export_as_url_api_v1_templates_url_get_with_http_info(project_id, opts)
      data
    end

    # Export As Url
    # Get a template for a project as a shareable URL.  The URL can then be passed to &#x60;https://todoist.com/api/v1/import/project_from_url?t_url&#x3D;&lt;url&gt;&#x60; to make a shareable template.
    # @param project_id [ProjectId3]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :use_relative_dates  (default to true)
    # @return [Array<(FileURLResponse, Integer, Hash)>] FileURLResponse data, response status code and response headers
    def export_as_url_api_v1_templates_url_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.export_as_url_api_v1_templates_url_get ..."
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling TemplatesApi.export_as_url_api_v1_templates_url_get"
      end
      # resource path
      local_var_path = "/api/v1/templates/url"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:project_id] = project_id
      query_params[:use_relative_dates] = opts[:use_relative_dates] if !opts[:use_relative_dates].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "FileURLResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TemplatesApi.export_as_url_api_v1_templates_url_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#export_as_url_api_v1_templates_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Import Into Project From File
    # A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
    # @param todoist_apps_import_export_controllers_rest_body2 [TodoistAppsImportExportControllersRestBody2]
    # @param [Hash] opts the optional parameters
    # @return [ProjectImportResponse]
    def import_into_project_from_file_api_v1_templates_import_into_project_from_file_post(todoist_apps_import_export_controllers_rest_body2, opts = {})
      data, _status_code, _headers = import_into_project_from_file_api_v1_templates_import_into_project_from_file_post_with_http_info(todoist_apps_import_export_controllers_rest_body2, opts)
      data
    end

    # Import Into Project From File
    # A template can be imported in an existing project, or in a newly created one.  Upload a file suitable to be passed as a template to be imported into a project.
    # @param todoist_apps_import_export_controllers_rest_body2 [TodoistAppsImportExportControllersRestBody2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectImportResponse, Integer, Hash)>] ProjectImportResponse data, response status code and response headers
    def import_into_project_from_file_api_v1_templates_import_into_project_from_file_post_with_http_info(todoist_apps_import_export_controllers_rest_body2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.import_into_project_from_file_api_v1_templates_import_into_project_from_file_post ..."
      end
      # verify the required parameter 'todoist_apps_import_export_controllers_rest_body2' is set
      if @api_client.config.client_side_validation && todoist_apps_import_export_controllers_rest_body2.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_import_export_controllers_rest_body2' when calling TemplatesApi.import_into_project_from_file_api_v1_templates_import_into_project_from_file_post"
      end
      # resource path
      local_var_path = "/api/v1/templates/import_into_project_from_file"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_import_export_controllers_rest_body2)

      # return_type
      return_type = opts[:debug_return_type] || "ProjectImportResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TemplatesApi.import_into_project_from_file_api_v1_templates_import_into_project_from_file_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#import_into_project_from_file_api_v1_templates_import_into_project_from_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Import Into Project From Template Id
    # @param template_id [String]
    # @param todoist_apps_import_export_controllers_rest_body1 [TodoistAppsImportExportControllersRestBody1]
    # @param [Hash] opts the optional parameters
    # @return [ProjectImportResponse]
    def import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post(template_id, todoist_apps_import_export_controllers_rest_body1, opts = {})
      data, _status_code, _headers = import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post_with_http_info(template_id, todoist_apps_import_export_controllers_rest_body1, opts)
      data
    end

    # Import Into Project From Template Id
    # @param template_id [String]
    # @param todoist_apps_import_export_controllers_rest_body1 [TodoistAppsImportExportControllersRestBody1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectImportResponse, Integer, Hash)>] ProjectImportResponse data, response status code and response headers
    def import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post_with_http_info(template_id, todoist_apps_import_export_controllers_rest_body1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post"
      end
      # verify the required parameter 'todoist_apps_import_export_controllers_rest_body1' is set
      if @api_client.config.client_side_validation && todoist_apps_import_export_controllers_rest_body1.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_import_export_controllers_rest_body1' when calling TemplatesApi.import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post"
      end
      # resource path
      local_var_path = "/api/v1/templates/import_into_project_from_template_id"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:template_id] = template_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_import_export_controllers_rest_body1)

      # return_type
      return_type = opts[:debug_return_type] || "ProjectImportResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TemplatesApi.import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#import_into_project_from_template_id_api_v1_templates_import_into_project_from_template_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
