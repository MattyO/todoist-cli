# #Todoist API
#
## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime.
#
# The version of the OpenAPI document: 1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.14.0-SNAPSHOT
#

require "cgi"

module Todoist
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Close Task
    # Closes a task.  The command performs in the same way as our official clients:  Regular tasks are marked complete and moved to history, along with their subtasks. Tasks with [recurring due dates](https://todoist.com/help/articles/introduction-to-recurring-dates-YUYVJJAV) will be scheduled to their next occurrence.
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def close_task_api_v1_tasks_task_id_close_post(task_id, opts = {})
      data, _status_code, _headers = close_task_api_v1_tasks_task_id_close_post_with_http_info(task_id, opts)
      data
    end

    # Close Task
    # Closes a task.  The command performs in the same way as our official clients:  Regular tasks are marked complete and moved to history, along with their subtasks. Tasks with [recurring due dates](https://todoist.com/help/articles/introduction-to-recurring-dates-YUYVJJAV) will be scheduled to their next occurrence.
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def close_task_api_v1_tasks_task_id_close_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.close_task_api_v1_tasks_task_id_close_post ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.close_task_api_v1_tasks_task_id_close_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}/close".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Object"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.close_task_api_v1_tasks_task_id_close_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#close_task_api_v1_tasks_task_id_close_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Task
    # @param todoist_apps_api_rest_tasks_body1 [TodoistAppsApiRestTasksBody1]
    # @param [Hash] opts the optional parameters
    # @return [ItemSyncView]
    def create_task_api_v1_tasks_post(todoist_apps_api_rest_tasks_body1, opts = {})
      data, _status_code, _headers = create_task_api_v1_tasks_post_with_http_info(todoist_apps_api_rest_tasks_body1, opts)
      data
    end

    # Create Task
    # @param todoist_apps_api_rest_tasks_body1 [TodoistAppsApiRestTasksBody1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemSyncView, Integer, Hash)>] ItemSyncView data, response status code and response headers
    def create_task_api_v1_tasks_post_with_http_info(todoist_apps_api_rest_tasks_body1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.create_task_api_v1_tasks_post ..."
      end
      # verify the required parameter 'todoist_apps_api_rest_tasks_body1' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_tasks_body1.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_tasks_body1' when calling TasksApi.create_task_api_v1_tasks_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_tasks_body1)

      # return_type
      return_type = opts[:debug_return_type] || "ItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.create_task_api_v1_tasks_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#create_task_api_v1_tasks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Task
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_task_api_v1_tasks_task_id_delete(task_id, opts = {})
      data, _status_code, _headers = delete_task_api_v1_tasks_task_id_delete_with_http_info(task_id, opts)
      data
    end

    # Delete Task
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_task_api_v1_tasks_task_id_delete_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.delete_task_api_v1_tasks_task_id_delete ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.delete_task_api_v1_tasks_task_id_delete"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Object"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.delete_task_api_v1_tasks_task_id_delete",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#delete_task_api_v1_tasks_task_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Task
    # Returns a single active (non-completed) task by ID
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [ItemSyncView]
    def get_task_api_v1_tasks_task_id_get(task_id, opts = {})
      data, _status_code, _headers = get_task_api_v1_tasks_task_id_get_with_http_info(task_id, opts)
      data
    end

    # Get Task
    # Returns a single active (non-completed) task by ID
    # @param task_id [TaskId2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemSyncView, Integer, Hash)>] ItemSyncView data, response status code and response headers
    def get_task_api_v1_tasks_task_id_get_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.get_task_api_v1_tasks_task_id_get ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_task_api_v1_tasks_task_id_get"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.get_task_api_v1_tasks_task_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_task_api_v1_tasks_task_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Tasks
    # Returns a paginated list containing all active tasks
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :label
    # @option opts [String] :ids
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListItemSyncView]
    def get_tasks_api_v1_tasks_get(opts = {})
      data, _status_code, _headers = get_tasks_api_v1_tasks_get_with_http_info(opts)
      data
    end

    # Get Tasks
    # Returns a paginated list containing all active tasks
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :label
    # @option opts [String] :ids
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListItemSyncView, Integer, Hash)>] PaginatedListItemSyncView data, response status code and response headers
    def get_tasks_api_v1_tasks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.get_tasks_api_v1_tasks_get ..."
      end
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling TasksApi.get_tasks_api_v1_tasks_get, the character length must be great than or equal to 1.'
      end

      pattern = /^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling TasksApi.get_tasks_api_v1_tasks_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks_api_v1_tasks_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = "/api/v1/tasks"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:project_id] = opts[:project_id] if !opts[:project_id].nil?
      query_params[:section_id] = opts[:section_id] if !opts[:section_id].nil?
      query_params[:parent_id] = opts[:parent_id] if !opts[:parent_id].nil?
      query_params[:label] = opts[:label] if !opts[:label].nil?
      query_params[:ids] = opts[:ids] if !opts[:ids].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PaginatedListItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.get_tasks_api_v1_tasks_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_tasks_api_v1_tasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Tasks By Filter
    # @param query [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListItemSyncView]
    def get_tasks_by_filter_api_v1_tasks_filter_get(query, opts = {})
      data, _status_code, _headers = get_tasks_by_filter_api_v1_tasks_filter_get_with_http_info(query, opts)
      data
    end

    # Get Tasks By Filter
    # @param query [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListItemSyncView, Integer, Hash)>] PaginatedListItemSyncView data, response status code and response headers
    def get_tasks_by_filter_api_v1_tasks_filter_get_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 1024
        fail ArgumentError, 'invalid value for "query" when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && query.to_s.length < 1
        fail ArgumentError, 'invalid value for "query" when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get, the character length must be great than or equal to 1.'
      end

      pattern = /^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = "/api/v1/tasks/filter"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:lang] = opts[:lang] if !opts[:lang].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PaginatedListItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.get_tasks_by_filter_api_v1_tasks_filter_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_tasks_by_filter_api_v1_tasks_filter_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Move Task
    # Moves task to another project, section or parent.
    # @param task_id [String]
    # @param todoist_apps_api_rest_tasks_body2 [TodoistAppsApiRestTasksBody2]
    # @param [Hash] opts the optional parameters
    # @return [ItemSyncView]
    def move_task_api_v1_tasks_task_id_move_post(task_id, todoist_apps_api_rest_tasks_body2, opts = {})
      data, _status_code, _headers = move_task_api_v1_tasks_task_id_move_post_with_http_info(task_id, todoist_apps_api_rest_tasks_body2, opts)
      data
    end

    # Move Task
    # Moves task to another project, section or parent.
    # @param task_id [String]
    # @param todoist_apps_api_rest_tasks_body2 [TodoistAppsApiRestTasksBody2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemSyncView, Integer, Hash)>] ItemSyncView data, response status code and response headers
    def move_task_api_v1_tasks_task_id_move_post_with_http_info(task_id, todoist_apps_api_rest_tasks_body2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.move_task_api_v1_tasks_task_id_move_post ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.move_task_api_v1_tasks_task_id_move_post"
      end
      # verify the required parameter 'todoist_apps_api_rest_tasks_body2' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_tasks_body2.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_tasks_body2' when calling TasksApi.move_task_api_v1_tasks_task_id_move_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}/move".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_tasks_body2)

      # return_type
      return_type = opts[:debug_return_type] || "ItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.move_task_api_v1_tasks_task_id_move_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#move_task_api_v1_tasks_task_id_move_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Quick Add
    # Add a new task using the Quick Add implementation similar to that used in the official clients
    # @param todoist_apps_api_sync_rest_quick_body [TodoistAppsApiSyncRestQuickBody]
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def quick_add_api_v1_tasks_quick_post(todoist_apps_api_sync_rest_quick_body, opts = {})
      data, _status_code, _headers = quick_add_api_v1_tasks_quick_post_with_http_info(todoist_apps_api_sync_rest_quick_body, opts)
      data
    end

    # Quick Add
    # Add a new task using the Quick Add implementation similar to that used in the official clients
    # @param todoist_apps_api_sync_rest_quick_body [TodoistAppsApiSyncRestQuickBody]
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def quick_add_api_v1_tasks_quick_post_with_http_info(todoist_apps_api_sync_rest_quick_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.quick_add_api_v1_tasks_quick_post ..."
      end
      # verify the required parameter 'todoist_apps_api_sync_rest_quick_body' is set
      if @api_client.config.client_side_validation && todoist_apps_api_sync_rest_quick_body.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_sync_rest_quick_body' when calling TasksApi.quick_add_api_v1_tasks_quick_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks/quick"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_sync_rest_quick_body)

      # return_type
      return_type = opts[:debug_return_type] || "Hash<String, Object>"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.quick_add_api_v1_tasks_quick_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#quick_add_api_v1_tasks_quick_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Reopen Task
    # Reopens a task.  Any ancestor tasks or sections will also be marked as uncomplete and restored from history.  The reinstated tasks and sections will appear at the end of the list within their parent, after any previously active tasks.
    # @param task_id [TaskId1]
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reopen_task_api_v1_tasks_task_id_reopen_post(task_id, opts = {})
      data, _status_code, _headers = reopen_task_api_v1_tasks_task_id_reopen_post_with_http_info(task_id, opts)
      data
    end

    # Reopen Task
    # Reopens a task.  Any ancestor tasks or sections will also be marked as uncomplete and restored from history.  The reinstated tasks and sections will appear at the end of the list within their parent, after any previously active tasks.
    # @param task_id [TaskId1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reopen_task_api_v1_tasks_task_id_reopen_post_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.reopen_task_api_v1_tasks_task_id_reopen_post ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.reopen_task_api_v1_tasks_task_id_reopen_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}/reopen".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Object"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.reopen_task_api_v1_tasks_task_id_reopen_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#reopen_task_api_v1_tasks_task_id_reopen_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Tasks Completed By Completion Date
    # Retrieves a list of completed tasks strictly limited by the specified completion date range (up to 3 months).  It can retrieve completed items:  - From all the projects the user has joined in a workspace - From all the projects of the user - That match many [supported   filters](https://todoist.com/help/articles/introduction-to-filters-V98wIH)  By default, the response is limited to a page containing a maximum of 50 items (configurable using `limit`).  Subsequent pages of results can be fetched by using the `next_cursor` value from the response as the `cursor` value for the next request.
    # @param since [Time]
    # @param _until [Time]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId1] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :filter_query
    # @option opts [String] :filter_lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [TasksCompletedDateResponse]
    def tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get(since, _until, opts = {})
      data, _status_code, _headers = tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get_with_http_info(since, _until, opts)
      data
    end

    # Tasks Completed By Completion Date
    # Retrieves a list of completed tasks strictly limited by the specified completion date range (up to 3 months).  It can retrieve completed items:  - From all the projects the user has joined in a workspace - From all the projects of the user - That match many [supported   filters](https://todoist.com/help/articles/introduction-to-filters-V98wIH)  By default, the response is limited to a page containing a maximum of 50 items (configurable using &#x60;limit&#x60;).  Subsequent pages of results can be fetched by using the &#x60;next_cursor&#x60; value from the response as the &#x60;cursor&#x60; value for the next request.
    # @param since [Time]
    # @param _until [Time]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId1] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :filter_query
    # @option opts [String] :filter_lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(TasksCompletedDateResponse, Integer, Hash)>] TasksCompletedDateResponse data, response status code and response headers
    def tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get_with_http_info(since, _until, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get ..."
      end
      # verify the required parameter 'since' is set
      if @api_client.config.client_side_validation && since.nil?
        fail ArgumentError, "Missing the required parameter 'since' when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get"
      end
      # verify the required parameter '_until' is set
      if @api_client.config.client_side_validation && _until.nil?
        fail ArgumentError, "Missing the required parameter '_until' when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get"
      end
      if @api_client.config.client_side_validation && !opts[:filter_query].nil? && opts[:filter_query].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"filter_query"]" when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:filter_query].nil? && opts[:filter_query].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"filter_query"]" when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get, the character length must be great than or equal to 1.'
      end

      pattern = /^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/api/v1/tasks/completed/by_completion_date"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:since] = since
      query_params[:until] = _until
      query_params[:workspace_id] = opts[:workspace_id] if !opts[:workspace_id].nil?
      query_params[:project_id] = opts[:project_id] if !opts[:project_id].nil?
      query_params[:section_id] = opts[:section_id] if !opts[:section_id].nil?
      query_params[:parent_id] = opts[:parent_id] if !opts[:parent_id].nil?
      query_params[:filter_query] = opts[:filter_query] if !opts[:filter_query].nil?
      query_params[:filter_lang] = opts[:filter_lang] if !opts[:filter_lang].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "TasksCompletedDateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_completed_by_completion_date_api_v1_tasks_completed_by_completion_date_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Tasks Completed By Due Date
    # Retrieves a list of completed items strictly limited by the specified due date range (up to 6 weeks).  It can retrieve completed items:  - From within a project, section, or parent item - From all the projects the user has joined in a workspace - From all the projects of the user - That match many [supported   filters](https://todoist.com/help/articles/introduction-to-filters-V98wIH)  By default, the response is limited to a page containing a maximum of 50 items (configurable using `limit`).  Subsequent pages of results can be fetched by using the `next_cursor` value from the response as the `cursor` value for the next request.
    # @param since [Time]
    # @param _until [Time]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId1] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :filter_query
    # @option opts [String] :filter_lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [TasksCompletedDateResponse]
    def tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get(since, _until, opts = {})
      data, _status_code, _headers = tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get_with_http_info(since, _until, opts)
      data
    end

    # Tasks Completed By Due Date
    # Retrieves a list of completed items strictly limited by the specified due date range (up to 6 weeks).  It can retrieve completed items:  - From within a project, section, or parent item - From all the projects the user has joined in a workspace - From all the projects of the user - That match many [supported   filters](https://todoist.com/help/articles/introduction-to-filters-V98wIH)  By default, the response is limited to a page containing a maximum of 50 items (configurable using &#x60;limit&#x60;).  Subsequent pages of results can be fetched by using the &#x60;next_cursor&#x60; value from the response as the &#x60;cursor&#x60; value for the next request.
    # @param since [Time]
    # @param _until [Time]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :workspace_id
    # @option opts [ProjectId2] :project_id
    # @option opts [SectionId1] :section_id
    # @option opts [ParentId] :parent_id
    # @option opts [String] :filter_query
    # @option opts [String] :filter_lang
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(TasksCompletedDateResponse, Integer, Hash)>] TasksCompletedDateResponse data, response status code and response headers
    def tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get_with_http_info(since, _until, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get ..."
      end
      # verify the required parameter 'since' is set
      if @api_client.config.client_side_validation && since.nil?
        fail ArgumentError, "Missing the required parameter 'since' when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get"
      end
      # verify the required parameter '_until' is set
      if @api_client.config.client_side_validation && _until.nil?
        fail ArgumentError, "Missing the required parameter '_until' when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get"
      end
      if @api_client.config.client_side_validation && !opts[:filter_query].nil? && opts[:filter_query].to_s.length > 1024
        fail ArgumentError, 'invalid value for "opts[:"filter_query"]" when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get, the character length must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:filter_query].nil? && opts[:filter_query].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"filter_query"]" when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get, the character length must be great than or equal to 1.'
      end

      pattern = /^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/api/v1/tasks/completed/by_due_date"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:since] = since
      query_params[:until] = _until
      query_params[:workspace_id] = opts[:workspace_id] if !opts[:workspace_id].nil?
      query_params[:project_id] = opts[:project_id] if !opts[:project_id].nil?
      query_params[:section_id] = opts[:section_id] if !opts[:section_id].nil?
      query_params[:parent_id] = opts[:parent_id] if !opts[:parent_id].nil?
      query_params[:filter_query] = opts[:filter_query] if !opts[:filter_query].nil?
      query_params[:filter_lang] = opts[:filter_lang] if !opts[:filter_lang].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "TasksCompletedDateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#tasks_completed_by_due_date_api_v1_tasks_completed_by_due_date_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Task
    # @param task_id [TaskId2]
    # @param todoist_apps_api_rest_tasks_body3 [TodoistAppsApiRestTasksBody3]
    # @param [Hash] opts the optional parameters
    # @return [ItemSyncView]
    def update_task_api_v1_tasks_task_id_post(task_id, todoist_apps_api_rest_tasks_body3, opts = {})
      data, _status_code, _headers = update_task_api_v1_tasks_task_id_post_with_http_info(task_id, todoist_apps_api_rest_tasks_body3, opts)
      data
    end

    # Update Task
    # @param task_id [TaskId2]
    # @param todoist_apps_api_rest_tasks_body3 [TodoistAppsApiRestTasksBody3]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ItemSyncView, Integer, Hash)>] ItemSyncView data, response status code and response headers
    def update_task_api_v1_tasks_task_id_post_with_http_info(task_id, todoist_apps_api_rest_tasks_body3, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.update_task_api_v1_tasks_task_id_post ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.update_task_api_v1_tasks_task_id_post"
      end
      # verify the required parameter 'todoist_apps_api_rest_tasks_body3' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_tasks_body3.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_tasks_body3' when calling TasksApi.update_task_api_v1_tasks_task_id_post"
      end
      # resource path
      local_var_path = "/api/v1/tasks/{task_id}".sub("{" + "task_id" + "}", CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_tasks_body3)

      # return_type
      return_type = opts[:debug_return_type] || "ItemSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"TasksApi.update_task_api_v1_tasks_task_id_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#update_task_api_v1_tasks_task_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
