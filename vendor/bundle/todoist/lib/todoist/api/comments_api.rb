# #Todoist API
#
## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime.
#
# The version of the OpenAPI document: 1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.14.0-SNAPSHOT
#

require "cgi"

module Todoist
  class CommentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Comment
    # Creates a new comment on a project or task and returns it.  One of `task_id` or `project_id` arguments is required.
    # @param todoist_apps_api_rest_comments_body1 [TodoistAppsApiRestCommentsBody1]
    # @param [Hash] opts the optional parameters
    # @return [NoteSyncView]
    def create_comment_api_v1_comments_post(todoist_apps_api_rest_comments_body1, opts = {})
      data, _status_code, _headers = create_comment_api_v1_comments_post_with_http_info(todoist_apps_api_rest_comments_body1, opts)
      data
    end

    # Create Comment
    # Creates a new comment on a project or task and returns it.  One of &#x60;task_id&#x60; or &#x60;project_id&#x60; arguments is required.
    # @param todoist_apps_api_rest_comments_body1 [TodoistAppsApiRestCommentsBody1]
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteSyncView, Integer, Hash)>] NoteSyncView data, response status code and response headers
    def create_comment_api_v1_comments_post_with_http_info(todoist_apps_api_rest_comments_body1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CommentsApi.create_comment_api_v1_comments_post ..."
      end
      # verify the required parameter 'todoist_apps_api_rest_comments_body1' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_comments_body1.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_comments_body1' when calling CommentsApi.create_comment_api_v1_comments_post"
      end
      # resource path
      local_var_path = "/api/v1/comments"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_comments_body1)

      # return_type
      return_type = opts[:debug_return_type] || "NoteSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"CommentsApi.create_comment_api_v1_comments_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#create_comment_api_v1_comments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Comment
    # Delete a comment by ID
    # @param comment_id [CommentId2]
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_comment_api_v1_comments_comment_id_delete(comment_id, opts = {})
      data, _status_code, _headers = delete_comment_api_v1_comments_comment_id_delete_with_http_info(comment_id, opts)
      data
    end

    # Delete Comment
    # Delete a comment by ID
    # @param comment_id [CommentId2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_comment_api_v1_comments_comment_id_delete_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CommentsApi.delete_comment_api_v1_comments_comment_id_delete ..."
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentsApi.delete_comment_api_v1_comments_comment_id_delete"
      end
      # resource path
      local_var_path = "/api/v1/comments/{comment_id}".sub("{" + "comment_id" + "}", CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Object"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"CommentsApi.delete_comment_api_v1_comments_comment_id_delete",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#delete_comment_api_v1_comments_comment_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Comment
    # Returns a single comment by ID
    # @param comment_id [CommentId]
    # @param [Hash] opts the optional parameters
    # @return [NoteSyncView]
    def get_comment_api_v1_comments_comment_id_get(comment_id, opts = {})
      data, _status_code, _headers = get_comment_api_v1_comments_comment_id_get_with_http_info(comment_id, opts)
      data
    end

    # Get Comment
    # Returns a single comment by ID
    # @param comment_id [CommentId]
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteSyncView, Integer, Hash)>] NoteSyncView data, response status code and response headers
    def get_comment_api_v1_comments_comment_id_get_with_http_info(comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CommentsApi.get_comment_api_v1_comments_comment_id_get ..."
      end
      # resource path
      local_var_path = "/api/v1/comments/{comment_id}".sub("{" + "comment_id" + "}", CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "NoteSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"CommentsApi.get_comment_api_v1_comments_comment_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#get_comment_api_v1_comments_comment_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Comments
    # Returns a list of all comments for a given `task_id` or `project_id`.  One of `task_id` or `project_id` arguments is required.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectId1] :project_id
    # @option opts [TaskId] :task_id
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [PaginatedListNoteSyncView]
    def get_comments_api_v1_comments_get(opts = {})
      data, _status_code, _headers = get_comments_api_v1_comments_get_with_http_info(opts)
      data
    end

    # Get Comments
    # Returns a list of all comments for a given &#x60;task_id&#x60; or &#x60;project_id&#x60;.  One of &#x60;task_id&#x60; or &#x60;project_id&#x60; arguments is required.
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectId1] :project_id
    # @option opts [TaskId] :task_id
    # @option opts [String] :cursor
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(PaginatedListNoteSyncView, Integer, Hash)>] PaginatedListNoteSyncView data, response status code and response headers
    def get_comments_api_v1_comments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CommentsApi.get_comments_api_v1_comments_get ..."
      end
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"cursor"]" when calling CommentsApi.get_comments_api_v1_comments_get, the character length must be great than or equal to 1.'
      end

      pattern = /^[0-9a-zA-Z_-]+\.[0-9a-zA-Z_-]+$/
      if @api_client.config.client_side_validation && !opts[:cursor].nil? && opts[:cursor] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"cursor\"]' when calling CommentsApi.get_comments_api_v1_comments_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:limit].nil? && opts[:limit] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CommentsApi.get_comments_api_v1_comments_get, must be smaller than or equal to 200.'
      end

      # resource path
      local_var_path = "/api/v1/comments"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:project_id] = opts[:project_id] if !opts[:project_id].nil?
      query_params[:task_id] = opts[:task_id] if !opts[:task_id].nil?
      query_params[:cursor] = opts[:cursor] if !opts[:cursor].nil?
      query_params[:limit] = opts[:limit] if !opts[:limit].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PaginatedListNoteSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"CommentsApi.get_comments_api_v1_comments_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#get_comments_api_v1_comments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Comment
    # Update a comment by ID and returns its content
    # @param comment_id [CommentId1]
    # @param todoist_apps_api_rest_comments_body2 [TodoistAppsApiRestCommentsBody2]
    # @param [Hash] opts the optional parameters
    # @return [NoteSyncView]
    def update_comment_api_v1_comments_comment_id_post(comment_id, todoist_apps_api_rest_comments_body2, opts = {})
      data, _status_code, _headers = update_comment_api_v1_comments_comment_id_post_with_http_info(comment_id, todoist_apps_api_rest_comments_body2, opts)
      data
    end

    # Update Comment
    # Update a comment by ID and returns its content
    # @param comment_id [CommentId1]
    # @param todoist_apps_api_rest_comments_body2 [TodoistAppsApiRestCommentsBody2]
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteSyncView, Integer, Hash)>] NoteSyncView data, response status code and response headers
    def update_comment_api_v1_comments_comment_id_post_with_http_info(comment_id, todoist_apps_api_rest_comments_body2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CommentsApi.update_comment_api_v1_comments_comment_id_post ..."
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling CommentsApi.update_comment_api_v1_comments_comment_id_post"
      end
      # verify the required parameter 'todoist_apps_api_rest_comments_body2' is set
      if @api_client.config.client_side_validation && todoist_apps_api_rest_comments_body2.nil?
        fail ArgumentError, "Missing the required parameter 'todoist_apps_api_rest_comments_body2' when calling CommentsApi.update_comment_api_v1_comments_comment_id_post"
      end
      # resource path
      local_var_path = "/api/v1/comments/{comment_id}".sub("{" + "comment_id" + "}", CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
        header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(todoist_apps_api_rest_comments_body2)

      # return_type
      return_type = opts[:debug_return_type] || "NoteSyncView"

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :"CommentsApi.update_comment_api_v1_comments_comment_id_post",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#update_comment_api_v1_comments_comment_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
