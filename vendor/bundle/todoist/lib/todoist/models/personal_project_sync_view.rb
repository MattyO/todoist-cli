=begin
#Todoist API

## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
Generator version: 7.14.0-SNAPSHOT

=end

require 'date'
require 'time'

module Todoist
  # A representation of a Personal Project Sync View, extending the base ProjectSync View, to be returned to clients in a sync (or sync-like) response.
  class PersonalProjectSyncView
    attr_accessor :id

    attr_accessor :can_assign_tasks

    attr_accessor :child_order

    attr_accessor :color

    attr_accessor :created_at

    attr_accessor :is_archived

    attr_accessor :is_deleted

    attr_accessor :is_favorite

    attr_accessor :is_frozen

    attr_accessor :name

    attr_accessor :updated_at

    attr_accessor :view_style

    attr_accessor :default_order

    attr_accessor :description

    attr_accessor :access

    attr_accessor :parent_id

    attr_accessor :inbox_project

    attr_accessor :is_collapsed

    attr_accessor :is_shared

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'can_assign_tasks' => :'can_assign_tasks',
        :'child_order' => :'child_order',
        :'color' => :'color',
        :'created_at' => :'created_at',
        :'is_archived' => :'is_archived',
        :'is_deleted' => :'is_deleted',
        :'is_favorite' => :'is_favorite',
        :'is_frozen' => :'is_frozen',
        :'name' => :'name',
        :'updated_at' => :'updated_at',
        :'view_style' => :'view_style',
        :'default_order' => :'default_order',
        :'description' => :'description',
        :'access' => :'access',
        :'parent_id' => :'parent_id',
        :'inbox_project' => :'inbox_project',
        :'is_collapsed' => :'is_collapsed',
        :'is_shared' => :'is_shared'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'can_assign_tasks' => :'Boolean',
        :'child_order' => :'Integer',
        :'color' => :'String',
        :'created_at' => :'String',
        :'is_archived' => :'Boolean',
        :'is_deleted' => :'Boolean',
        :'is_favorite' => :'Boolean',
        :'is_frozen' => :'Boolean',
        :'name' => :'String',
        :'updated_at' => :'String',
        :'view_style' => :'String',
        :'default_order' => :'Integer',
        :'description' => :'String',
        :'access' => :'ProjectAccessView',
        :'parent_id' => :'String',
        :'inbox_project' => :'Boolean',
        :'is_collapsed' => :'Boolean',
        :'is_shared' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'created_at',
        :'updated_at',
        :'access',
        :'parent_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Todoist::PersonalProjectSyncView` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Todoist::PersonalProjectSyncView`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'can_assign_tasks')
        self.can_assign_tasks = attributes[:'can_assign_tasks']
      else
        self.can_assign_tasks = nil
      end

      if attributes.key?(:'child_order')
        self.child_order = attributes[:'child_order']
      else
        self.child_order = nil
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      else
        self.color = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'is_archived')
        self.is_archived = attributes[:'is_archived']
      else
        self.is_archived = nil
      end

      if attributes.key?(:'is_deleted')
        self.is_deleted = attributes[:'is_deleted']
      else
        self.is_deleted = nil
      end

      if attributes.key?(:'is_favorite')
        self.is_favorite = attributes[:'is_favorite']
      else
        self.is_favorite = nil
      end

      if attributes.key?(:'is_frozen')
        self.is_frozen = attributes[:'is_frozen']
      else
        self.is_frozen = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'view_style')
        self.view_style = attributes[:'view_style']
      else
        self.view_style = nil
      end

      if attributes.key?(:'default_order')
        self.default_order = attributes[:'default_order']
      else
        self.default_order = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'access')
        self.access = attributes[:'access']
      else
        self.access = nil
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      else
        self.parent_id = nil
      end

      if attributes.key?(:'inbox_project')
        self.inbox_project = attributes[:'inbox_project']
      else
        self.inbox_project = nil
      end

      if attributes.key?(:'is_collapsed')
        self.is_collapsed = attributes[:'is_collapsed']
      else
        self.is_collapsed = nil
      end

      if attributes.key?(:'is_shared')
        self.is_shared = attributes[:'is_shared']
      else
        self.is_shared = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @can_assign_tasks.nil?
        invalid_properties.push('invalid value for "can_assign_tasks", can_assign_tasks cannot be nil.')
      end

      if @child_order.nil?
        invalid_properties.push('invalid value for "child_order", child_order cannot be nil.')
      end

      if @color.nil?
        invalid_properties.push('invalid value for "color", color cannot be nil.')
      end

      if @is_archived.nil?
        invalid_properties.push('invalid value for "is_archived", is_archived cannot be nil.')
      end

      if @is_deleted.nil?
        invalid_properties.push('invalid value for "is_deleted", is_deleted cannot be nil.')
      end

      if @is_favorite.nil?
        invalid_properties.push('invalid value for "is_favorite", is_favorite cannot be nil.')
      end

      if @is_frozen.nil?
        invalid_properties.push('invalid value for "is_frozen", is_frozen cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @view_style.nil?
        invalid_properties.push('invalid value for "view_style", view_style cannot be nil.')
      end

      if @default_order.nil?
        invalid_properties.push('invalid value for "default_order", default_order cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @inbox_project.nil?
        invalid_properties.push('invalid value for "inbox_project", inbox_project cannot be nil.')
      end

      if @is_collapsed.nil?
        invalid_properties.push('invalid value for "is_collapsed", is_collapsed cannot be nil.')
      end

      if @is_shared.nil?
        invalid_properties.push('invalid value for "is_shared", is_shared cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @can_assign_tasks.nil?
      return false if @child_order.nil?
      return false if @color.nil?
      return false if @is_archived.nil?
      return false if @is_deleted.nil?
      return false if @is_favorite.nil?
      return false if @is_frozen.nil?
      return false if @name.nil?
      return false if @view_style.nil?
      return false if @default_order.nil?
      return false if @description.nil?
      return false if @inbox_project.nil?
      return false if @is_collapsed.nil?
      return false if @is_shared.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] can_assign_tasks Value to be assigned
    def can_assign_tasks=(can_assign_tasks)
      if can_assign_tasks.nil?
        fail ArgumentError, 'can_assign_tasks cannot be nil'
      end

      @can_assign_tasks = can_assign_tasks
    end

    # Custom attribute writer method with validation
    # @param [Object] child_order Value to be assigned
    def child_order=(child_order)
      if child_order.nil?
        fail ArgumentError, 'child_order cannot be nil'
      end

      @child_order = child_order
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      if color.nil?
        fail ArgumentError, 'color cannot be nil'
      end

      @color = color
    end

    # Custom attribute writer method with validation
    # @param [Object] is_archived Value to be assigned
    def is_archived=(is_archived)
      if is_archived.nil?
        fail ArgumentError, 'is_archived cannot be nil'
      end

      @is_archived = is_archived
    end

    # Custom attribute writer method with validation
    # @param [Object] is_deleted Value to be assigned
    def is_deleted=(is_deleted)
      if is_deleted.nil?
        fail ArgumentError, 'is_deleted cannot be nil'
      end

      @is_deleted = is_deleted
    end

    # Custom attribute writer method with validation
    # @param [Object] is_favorite Value to be assigned
    def is_favorite=(is_favorite)
      if is_favorite.nil?
        fail ArgumentError, 'is_favorite cannot be nil'
      end

      @is_favorite = is_favorite
    end

    # Custom attribute writer method with validation
    # @param [Object] is_frozen Value to be assigned
    def is_frozen=(is_frozen)
      if is_frozen.nil?
        fail ArgumentError, 'is_frozen cannot be nil'
      end

      @is_frozen = is_frozen
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] view_style Value to be assigned
    def view_style=(view_style)
      if view_style.nil?
        fail ArgumentError, 'view_style cannot be nil'
      end

      @view_style = view_style
    end

    # Custom attribute writer method with validation
    # @param [Object] default_order Value to be assigned
    def default_order=(default_order)
      if default_order.nil?
        fail ArgumentError, 'default_order cannot be nil'
      end

      @default_order = default_order
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] inbox_project Value to be assigned
    def inbox_project=(inbox_project)
      if inbox_project.nil?
        fail ArgumentError, 'inbox_project cannot be nil'
      end

      @inbox_project = inbox_project
    end

    # Custom attribute writer method with validation
    # @param [Object] is_collapsed Value to be assigned
    def is_collapsed=(is_collapsed)
      if is_collapsed.nil?
        fail ArgumentError, 'is_collapsed cannot be nil'
      end

      @is_collapsed = is_collapsed
    end

    # Custom attribute writer method with validation
    # @param [Object] is_shared Value to be assigned
    def is_shared=(is_shared)
      if is_shared.nil?
        fail ArgumentError, 'is_shared cannot be nil'
      end

      @is_shared = is_shared
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          can_assign_tasks == o.can_assign_tasks &&
          child_order == o.child_order &&
          color == o.color &&
          created_at == o.created_at &&
          is_archived == o.is_archived &&
          is_deleted == o.is_deleted &&
          is_favorite == o.is_favorite &&
          is_frozen == o.is_frozen &&
          name == o.name &&
          updated_at == o.updated_at &&
          view_style == o.view_style &&
          default_order == o.default_order &&
          description == o.description &&
          access == o.access &&
          parent_id == o.parent_id &&
          inbox_project == o.inbox_project &&
          is_collapsed == o.is_collapsed &&
          is_shared == o.is_shared
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, can_assign_tasks, child_order, color, created_at, is_archived, is_deleted, is_favorite, is_frozen, name, updated_at, view_style, default_order, description, access, parent_id, inbox_project, is_collapsed, is_shared].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Todoist.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
