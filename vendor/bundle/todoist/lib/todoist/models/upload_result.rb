=begin
#Todoist API

## Developing with Todoist  Thanks for your interest in developing apps with Todoist. In this section we will provide an overview of the API we offer and cover some common topics for application development using them.  You can use our API for free, but depending on your Todoist account plan (or that of the authenticated user), some features may be restricted.  Please consider subscribing to the [Todoist API mailing list](https://groups.google.com/a/doist.com/g/todoist-api) to get important updates.  ## Our API  Our API uses an approach that should be familiar to anyone with experience calling [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) APIs.  We also have a special endpoint called `/sync`, which is used by our first-party clients to keep the data updated locally without having to make many separate requests to the API. Anyone can use it, and some actions will only be available via `/sync`. The format is unconventional compared to current API standards, but it is our main driver for first-party apps.  ## Our SDKs  Our Python and JavaScript SDKs streamline working with the Todoist API, and can be installed from the main package registries for each ecosystem.  For instructions, examples, and reference documentation, visit their pages:  - [Todoist Python SDK](https://doist.github.io/todoist-api-python/) - [Todoist TypeScript SDK](https://doist.github.io/todoist-api-typescript/)  ## Pagination  Paginated endpoints are marked by having the `next_cursor` attribute in the response.  When a response comes back with `next_cursor: null`, it means the endpoint is paginated but there are no more pages to request data from.  If the cursor is `non-null`, there are more objects to return, and a new request is necessary to get the next page.  The `next_cursor` contains an _opaque_ string that shouldn't be modified in any way. It should be sent **as-is** in the `cursor` parameter along with the same parameters used in the previous request.  ## Integrations  Integrations can be created and updated [here](https://app.todoist.com/app_console).  Once done, they can also be submitted for evaluation and inclusion in [our official integrations list](https://www.todoist.com/integrations). This not only serves as an opportunity to market your integration to our audience, but will also serve as a way to help users get set up and familiar with your app quickly.  To get your integration evaluated, please submit it via [this page](https://doist.typeform.com/to/Vvq7kNcl?typeform-source=todoist.com/api/v1/docs).  Lost? Reach out to us at [submissions@doist.com](mailto:submissions@doist.com) anytime. 

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
Generator version: 7.14.0-SNAPSHOT

=end

require 'date'
require 'time'

module Todoist
  class UploadResult
    attr_accessor :file_url

    attr_accessor :file_name

    attr_accessor :file_size

    attr_accessor :file_type

    attr_accessor :resource_type

    attr_accessor :image

    attr_accessor :image_width

    attr_accessor :image_height

    attr_accessor :upload_state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_url' => :'file_url',
        :'file_name' => :'file_name',
        :'file_size' => :'file_size',
        :'file_type' => :'file_type',
        :'resource_type' => :'resource_type',
        :'image' => :'image',
        :'image_width' => :'image_width',
        :'image_height' => :'image_height',
        :'upload_state' => :'upload_state'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'file_url' => :'String',
        :'file_name' => :'String',
        :'file_size' => :'Integer',
        :'file_type' => :'String',
        :'resource_type' => :'String',
        :'image' => :'String',
        :'image_width' => :'Integer',
        :'image_height' => :'Integer',
        :'upload_state' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'image',
        :'image_width',
        :'image_height',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Todoist::UploadResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Todoist::UploadResult`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'file_url')
        self.file_url = attributes[:'file_url']
      else
        self.file_url = nil
      end

      if attributes.key?(:'file_name')
        self.file_name = attributes[:'file_name']
      else
        self.file_name = nil
      end

      if attributes.key?(:'file_size')
        self.file_size = attributes[:'file_size']
      else
        self.file_size = nil
      end

      if attributes.key?(:'file_type')
        self.file_type = attributes[:'file_type']
      else
        self.file_type = nil
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      else
        self.resource_type = nil
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'image_width')
        self.image_width = attributes[:'image_width']
      end

      if attributes.key?(:'image_height')
        self.image_height = attributes[:'image_height']
      end

      if attributes.key?(:'upload_state')
        self.upload_state = attributes[:'upload_state']
      else
        self.upload_state = 'pending'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @file_url.nil?
        invalid_properties.push('invalid value for "file_url", file_url cannot be nil.')
      end

      if @file_name.nil?
        invalid_properties.push('invalid value for "file_name", file_name cannot be nil.')
      end

      if @file_size.nil?
        invalid_properties.push('invalid value for "file_size", file_size cannot be nil.')
      end

      if @file_type.nil?
        invalid_properties.push('invalid value for "file_type", file_type cannot be nil.')
      end

      if @resource_type.nil?
        invalid_properties.push('invalid value for "resource_type", resource_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @file_url.nil?
      return false if @file_name.nil?
      return false if @file_size.nil?
      return false if @file_type.nil?
      return false if @resource_type.nil?
      upload_state_validator = EnumAttributeValidator.new('String', ["pending", "completed"])
      return false unless upload_state_validator.valid?(@upload_state)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] file_url Value to be assigned
    def file_url=(file_url)
      if file_url.nil?
        fail ArgumentError, 'file_url cannot be nil'
      end

      @file_url = file_url
    end

    # Custom attribute writer method with validation
    # @param [Object] file_name Value to be assigned
    def file_name=(file_name)
      if file_name.nil?
        fail ArgumentError, 'file_name cannot be nil'
      end

      @file_name = file_name
    end

    # Custom attribute writer method with validation
    # @param [Object] file_size Value to be assigned
    def file_size=(file_size)
      if file_size.nil?
        fail ArgumentError, 'file_size cannot be nil'
      end

      @file_size = file_size
    end

    # Custom attribute writer method with validation
    # @param [Object] file_type Value to be assigned
    def file_type=(file_type)
      if file_type.nil?
        fail ArgumentError, 'file_type cannot be nil'
      end

      @file_type = file_type
    end

    # Custom attribute writer method with validation
    # @param [Object] resource_type Value to be assigned
    def resource_type=(resource_type)
      if resource_type.nil?
        fail ArgumentError, 'resource_type cannot be nil'
      end

      @resource_type = resource_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] upload_state Object to be assigned
    def upload_state=(upload_state)
      validator = EnumAttributeValidator.new('String', ["pending", "completed"])
      unless validator.valid?(upload_state)
        fail ArgumentError, "invalid value for \"upload_state\", must be one of #{validator.allowable_values}."
      end
      @upload_state = upload_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_url == o.file_url &&
          file_name == o.file_name &&
          file_size == o.file_size &&
          file_type == o.file_type &&
          resource_type == o.resource_type &&
          image == o.image &&
          image_width == o.image_width &&
          image_height == o.image_height &&
          upload_state == o.upload_state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file_url, file_name, file_size, file_type, resource_type, image, image_width, image_height, upload_state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Todoist.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
